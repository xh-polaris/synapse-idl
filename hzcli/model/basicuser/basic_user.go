// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package basicuser

import (
	"fmt"
	"github.com/xh-polaris/synapse-idl/hzcli/model/base"
)

type BasicUser struct {
	BasicUserId string `thrift:"basicUserId,1" form:"basicUserId" json:"basicUserId" query:"basicUserId"`
}

func NewBasicUser() *BasicUser {
	return &BasicUser{}
}

func (p *BasicUser) InitDefault() {
}

func (p *BasicUser) GetBasicUserId() (v string) {
	return p.BasicUserId
}

func (p *BasicUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicUser(%+v)", *p)
}

/*
 基础用户相关API
*/
// 基础用户注册
type BasicUserRegisterReq struct {
	// 认证类型
	AuthType string `thrift:"authType,1" form:"authType" json:"authType" query:"authType"`
	// 认证id
	AuthId string `thrift:"authId,2" form:"authId" json:"authId" query:"authId"`
	// 认证凭证
	Verify string `thrift:"verify,3" form:"verify" json:"verify" query:"verify"`
	// 是否初始化密码
	Password *string   `thrift:"password,4,optional" form:"password" json:"password,omitempty" query:"password"`
	App      *base.App `thrift:"app,255" form:"app" json:"app" query:"app"`
}

func NewBasicUserRegisterReq() *BasicUserRegisterReq {
	return &BasicUserRegisterReq{}
}

func (p *BasicUserRegisterReq) InitDefault() {
}

func (p *BasicUserRegisterReq) GetAuthType() (v string) {
	return p.AuthType
}

func (p *BasicUserRegisterReq) GetAuthId() (v string) {
	return p.AuthId
}

func (p *BasicUserRegisterReq) GetVerify() (v string) {
	return p.Verify
}

var BasicUserRegisterReq_Password_DEFAULT string

func (p *BasicUserRegisterReq) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return BasicUserRegisterReq_Password_DEFAULT
	}
	return *p.Password
}

var BasicUserRegisterReq_App_DEFAULT *base.App

func (p *BasicUserRegisterReq) GetApp() (v *base.App) {
	if !p.IsSetApp() {
		return BasicUserRegisterReq_App_DEFAULT
	}
	return p.App
}

func (p *BasicUserRegisterReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *BasicUserRegisterReq) IsSetApp() bool {
	return p.App != nil
}

func (p *BasicUserRegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicUserRegisterReq(%+v)", *p)
}

type BasicUserRegisterResp struct {
	Resp      *base.Response `thrift:"resp,1" form:"resp" json:"resp" query:"resp"`
	Token     string         `thrift:"token,2" form:"token" json:"token" query:"token"`
	BasicUser *BasicUser     `thrift:"basicUser,255" form:"basicUser" json:"basicUser" query:"basicUser"`
}

func NewBasicUserRegisterResp() *BasicUserRegisterResp {
	return &BasicUserRegisterResp{}
}

func (p *BasicUserRegisterResp) InitDefault() {
}

var BasicUserRegisterResp_Resp_DEFAULT *base.Response

func (p *BasicUserRegisterResp) GetResp() (v *base.Response) {
	if !p.IsSetResp() {
		return BasicUserRegisterResp_Resp_DEFAULT
	}
	return p.Resp
}

func (p *BasicUserRegisterResp) GetToken() (v string) {
	return p.Token
}

var BasicUserRegisterResp_BasicUser_DEFAULT *BasicUser

func (p *BasicUserRegisterResp) GetBasicUser() (v *BasicUser) {
	if !p.IsSetBasicUser() {
		return BasicUserRegisterResp_BasicUser_DEFAULT
	}
	return p.BasicUser
}

func (p *BasicUserRegisterResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *BasicUserRegisterResp) IsSetBasicUser() bool {
	return p.BasicUser != nil
}

func (p *BasicUserRegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicUserRegisterResp(%+v)", *p)
}

// 基础用户登录
type BasicUserLoginReq struct {
	AuthType string    `thrift:"authType,1" form:"authType" json:"authType" query:"authType"`
	AuthId   string    `thrift:"authId,2" form:"authId" json:"authId" query:"authId"`
	Verify   string    `thrift:"verify,3" form:"verify" json:"verify" query:"verify"`
	App      *base.App `thrift:"app,255" form:"app" json:"app" query:"app"`
}

func NewBasicUserLoginReq() *BasicUserLoginReq {
	return &BasicUserLoginReq{}
}

func (p *BasicUserLoginReq) InitDefault() {
}

func (p *BasicUserLoginReq) GetAuthType() (v string) {
	return p.AuthType
}

func (p *BasicUserLoginReq) GetAuthId() (v string) {
	return p.AuthId
}

func (p *BasicUserLoginReq) GetVerify() (v string) {
	return p.Verify
}

var BasicUserLoginReq_App_DEFAULT *base.App

func (p *BasicUserLoginReq) GetApp() (v *base.App) {
	if !p.IsSetApp() {
		return BasicUserLoginReq_App_DEFAULT
	}
	return p.App
}

func (p *BasicUserLoginReq) IsSetApp() bool {
	return p.App != nil
}

func (p *BasicUserLoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicUserLoginReq(%+v)", *p)
}

type BasicUserLoginResp struct {
	Resp      *base.Response `thrift:"resp,1" form:"resp" json:"resp" query:"resp"`
	Token     string         `thrift:"token,2" form:"token" json:"token" query:"token"`
	BasicUser *BasicUser     `thrift:"basicUser,255" form:"basicUser" json:"basicUser" query:"basicUser"`
}

func NewBasicUserLoginResp() *BasicUserLoginResp {
	return &BasicUserLoginResp{}
}

func (p *BasicUserLoginResp) InitDefault() {
}

var BasicUserLoginResp_Resp_DEFAULT *base.Response

func (p *BasicUserLoginResp) GetResp() (v *base.Response) {
	if !p.IsSetResp() {
		return BasicUserLoginResp_Resp_DEFAULT
	}
	return p.Resp
}

func (p *BasicUserLoginResp) GetToken() (v string) {
	return p.Token
}

var BasicUserLoginResp_BasicUser_DEFAULT *BasicUser

func (p *BasicUserLoginResp) GetBasicUser() (v *BasicUser) {
	if !p.IsSetBasicUser() {
		return BasicUserLoginResp_BasicUser_DEFAULT
	}
	return p.BasicUser
}

func (p *BasicUserLoginResp) IsSetResp() bool {
	return p.Resp != nil
}

func (p *BasicUserLoginResp) IsSetBasicUser() bool {
	return p.BasicUser != nil
}

func (p *BasicUserLoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicUserLoginResp(%+v)", *p)
}
